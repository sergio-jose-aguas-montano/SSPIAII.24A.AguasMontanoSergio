grid.arrange(
plot_decision_boundary(model_rpart, testData, "Decision Tree"),
plot_decision_boundary_rf(model_rf, testData, "Random Forest"),
ncol = 2
)
install.packages("rpart")
install.packages("randomForest")
install.packages("caret")
install.packages("e1071")
install.packages("gridExtra")
install.packages("e1071")
# Gráfico combinado
grid.arrange(
plot_decision_boundary(model_rpart, testData, "Decision Tree"),
plot_decision_boundary_rf(model_rf, testData, "Random Forest"),
ncol = 2
)
# Gráfico combinado
grid.arrange(
plot_decision_boundary(model_rpart, testData, "Decision Tree"),
plot_decision_boundary_rf(model_rf, testData, "Random Forest"),
ncol = 2
)
# Gráfico combinado
grid.arrange(
plot_decision_boundary(model_rpart, testData, "Decision Tree"),
plot_decision_boundary_rf(model_rf, testData, "Random Forest"),
ncol = 2
)
# Leer el conjunto de datos
SoNetAds <- read.csv("Social_Network_Ads.csv", header = TRUE, stringsAsFactors = TRUE)
# Eliminar la columna User.ID
SoNetAds$User.ID <- NULL
# Dividir los datos en conjunto de entrenamiento y prueba
trainIndex <- createDataPartition(SoNetAds$Purchased, p = 0.7, list = FALSE)
# Leer el conjunto de datos
SoNetAds <- read.csv("Social_Network_Ads.csv", header = TRUE, stringsAsFactors = TRUE)
# Eliminar la columna User.ID
SoNetAds$User.ID <- NULL
# Dividir los datos en conjunto de entrenamiento y prueba
trainIndex <- createDataPartition(SoNetAds$Purchased, p = 0.7, list = FALSE)
#Creado por: Aguas Montaño Sergio José - 217815601
#Entorno de trabajo
getwd()
setwd("E:/Personal/UNI/8vo Semestre/SSPIAII/Trabajos GitHub/SSPIAII.24A.AguasMontanoSergio/Rstudio/p1.5_Arboles")
options(scipen = 999)
set.seed(2000)
library(ggplot2)
library(caTools)
library(mltools)
library(data.table)
library(cowplot)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(rpart)
library(randomForest)
library(caret)
library(e1071)
library(gridExtra)
library(ggplot2)
# Leer el conjunto de datos
SoNetAds <- read.csv("Social_Network_Ads.csv", header = TRUE, stringsAsFactors = TRUE)
# Eliminar la columna User.ID
SoNetAds$User.ID <- NULL
# Dividir los datos en conjunto de entrenamiento y prueba
trainIndex <- createDataPartition(SoNetAds$Purchased, p = 0.7, list = FALSE)
trainData <- SoNetAds[trainIndex, ]
testData <- SoNetAds[-trainIndex, ]
# Entrenar el modelo de árbol de decisión (rpart)
model_rpart <- rpart(Purchased ~ ., data = trainData, method = "class")
# Predecir en el conjunto de prueba
predictions_rpart <- predict(model_rpart, testData, type = "class")
# Construir matriz de confusión para el modelo de árbol de decisión
conf_matrix_rpart <- table(predictions_rpart, testData$Purchased)
conf_matrix_rpart
# Calcular exactitud del modelo de árbol de decisión
accuracy_rpart <- sum(diag(conf_matrix_rpart)) / sum(conf_matrix_rpart)
accuracy_rpart
# Entrenar el modelo de bosques aleatorios (randomForest)
model_rf <- randomForest(Purchased ~ ., data = trainData, ntree = 500)
# Predecir en el conjunto de prueba
predictions_rf <- predict(model_rf, testData)
# Construir matriz de confusión para el modelo de bosques aleatorios
conf_matrix_rf <- table(predictions_rf, testData$Purchased)
conf_matrix_rf
# Calcular exactitud del modelo de bosques aleatorios
accuracy_rf <- sum(diag(conf_matrix_rf)) / sum(conf_matrix_rf)
accuracy_rf
# Gráfico de clasificación para el modelo de árbol de decisión
plot_decision_boundary <- function(model, data, title) {
plot(data[, c("Age", "EstimatedSalary")], col = ifelse(data$Purchased == 1, "blue", "red"), pch = 20, main = title, xlab = "Age", ylab = "Estimated Salary")
contour(
expand.grid(
Age = seq(min(data$Age), max(data$Age), length = 100),
EstimatedSalary = seq(min(data$EstimatedSalary), max(data$EstimatedSalary), length = 100)
),
predict(model, newdata = expand.grid(Age = seq(min(data$Age), max(data$Age), length = 100), EstimatedSalary = seq(min(data$EstimatedSalary), max(data$EstimatedSalary), length = 100)), type = "class"),
add = TRUE,
levels = 0.5
)
}
# Gráfico de clasificación para el modelo de bosques aleatorios
plot_decision_boundary_rf <- function(model, data, title) {
plot(data[, c("Age", "EstimatedSalary")], col = ifelse(data$Purchased == 1, "blue", "red"), pch = 20, main = title, xlab = "Age", ylab = "Estimated Salary")
contour(
expand.grid(
Age = seq(min(data$Age), max(data$Age), length = 100),
EstimatedSalary = seq(min(data$EstimatedSalary), max(data$EstimatedSalary), length = 100)
),
predict(model, newdata = expand.grid(Age = seq(min(data$Age), max(data$Age), length = 100), EstimatedSalary = seq(min(data$EstimatedSalary), max(data$EstimatedSalary), length = 100))), type = "class")
add = TRUE
levels = 0.5
}
# Gráfico combinado
grid.arrange(
plot_decision_boundary(model_rpart, testData, "Decision Tree"),
plot_decision_boundary_rf(model_rf, testData, "Random Forest"),
ncol = 2
)
#Preprocesamiento
SoNetAds <- read.csv("Social_Network_Ads.csv",
header = T,
stringsAsFactors = T)
SoNetAds$User.ID <- NULL
#Modelo con rpart
SoNetAds.rpart <- rpart(formula = EstimatedSalary ~ Age, data = SoNetAds, minsplit = 5)
#Gráfico con ayuda del modelo rpart
rpart.plot(SoNetAds.rpart)
summary(SoNetAds)
# Leer el conjunto de datos
SoNetAds <- read.csv("Social_Network_Ads.csv",
header = TRUE,
stringsAsFactors = T)
# Eliminar la columna User.ID
SoNetAds$User.ID <- NULL
# Convertir la variable Purchased a factor
SoNetAds$Purchased <- as.factor(SoNetAds$Purchased)
# Dividir los datos en conjuntos de entrenamiento y prueba
indice <- sample(2, nrow(SoNetAds), replace = TRUE, prob = c(0.7, 0.3))
train_data <- SoNetAds[indice == 1, ]
test_data <- SoNetAds[indice == 2, ]
# Modelo con rpart
SoNetAds.rpart <- rpart(formula = Purchased ~ Age + EstimatedSalary, data = train_data, minsplit = 5)
# Realizar predicciones con el modelo rpart
predictions_rpart <- predict(SoNetAds.rpart, test_data, type = "class")
# Construir la matriz de confusión
confusion_matrix_rpart <- confusionMatrix(data = predictions_rpart, reference = test_data$Purchased)
print("Confusion Matrix for rpart:")
print(confusion_matrix_rpart)
# Gráfico de clasificación con el modelo rpart
# Creamos un conjunto de datos para la visualización
grid <- expand.grid(Age = seq(min(SoNetAds$Age), max(SoNetAds$Age), length.out = 100),
EstimatedSalary = seq(min(SoNetAds$EstimatedSalary), max(SoNetAds$EstimatedSalary), length.out = 100))
# Hacemos predicciones sobre el conjunto de datos
grid$Purchased <- predict(SoNetAds.rpart, newdata = grid, type = "class")
# Graficamos los datos con ggplot2
ggplot() +
geom_point(data = SoNetAds, aes(x = Age, y = EstimatedSalary, color = Purchased), alpha = 0.5) +
geom_point(data = grid, aes(x = Age, y = EstimatedSalary, color = Purchased), size = 1) +
scale_color_manual(values = c("red", "green")) +
labs(title = "Clasificación con modelo rpart",
x = "Age", y = "Estimated Salary")
# Modelo con Random Forest
SoNetAds_rf <- randomForest(formula = Purchased ~ Age + EstimatedSalary, data = train_data, ntree = 500)
# Realizar predicciones con el modelo Random Forest
predictions_rf <- predict(SoNetAds_rf, test_data)
# Construir la matriz de confusión
confusion_matrix_rf <- confusionMatrix(data = predictions_rf, reference = test_data$Purchased)
print("Confusion Matrix for Random Forest:")
print(confusion_matrix_rf)
# Gráfico de clasificación con el modelo Random Forest
# Generar datos para la visualización
grid_rf <- expand.grid(Age = seq(min(SoNetAds$Age), max(SoNetAds$Age), length.out = 100),
EstimatedSalary = seq(min(SoNetAds$EstimatedSalary), max(SoNetAds$EstimatedSalary), length.out = 100))
# Hacer predicciones sobre el conjunto de datos
grid_rf$Purchased <- predict(SoNetAds_rf, newdata = grid_rf)
# Crear gráfico con ggplot2 para Random Forest
plot_rf <- ggplot() +
geom_point(data = SoNetAds, aes(x = Age, y = EstimatedSalary, color = Purchased), alpha = 0.5) +
geom_point(data = grid_rf, aes(x = Age, y = EstimatedSalary, color = Purchased), size = 1) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Clasificación con Random Forest",
x = "Age", y = "Estimated Salary")
# Construir una sola gráfica que incluya ambas visualizaciones
library(gridExtra)
combined_plot <- grid.arrange(plot_rpart, plot_rf, nrow = 1)
# Modelo con Random Forest
SoNetAds_rf <- randomForest(formula = Purchased ~ Age + EstimatedSalary, data = train_data, ntree = 500)
# Realizar predicciones con el modelo Random Forest
predictions_rf <- predict(SoNetAds_rf, test_data)
# Construir la matriz de confusión
confusion_matrix_rf <- confusionMatrix(data = predictions_rf, reference = test_data$Purchased)
print("Confusion Matrix for Random Forest:")
print(confusion_matrix_rf)
# Gráfico de clasificación con el modelo Random Forest
# Generar datos para la visualización
grid_rf <- expand.grid(Age = seq(min(SoNetAds$Age), max(SoNetAds$Age), length.out = 100),
EstimatedSalary = seq(min(SoNetAds$EstimatedSalary), max(SoNetAds$EstimatedSalary), length.out = 100))
# Hacer predicciones sobre el conjunto de datos
grid_rf$Purchased <- predict(SoNetAds_rf, newdata = grid_rf)
# Crear gráfico con ggplot2 para Random Forest
plot_rf <- ggplot() +
geom_point(data = SoNetAds, aes(x = Age, y = EstimatedSalary, color = Purchased), alpha = 0.5) +
geom_point(data = grid_rf, aes(x = Age, y = EstimatedSalary, color = Purchased), size = 1) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Clasificación con Random Forest",
x = "Age", y = "Estimated Salary")
# Construir una sola gráfica que incluya ambas visualizaciones
library(gridExtra)
# Construir una sola gráfica que incluya ambas visualizaciones
install.packages(gridExtra)
library(gridExtra)
# Construir una sola gráfica que incluya ambas visualizaciones
install.packages("gridExtra")
library(gridExtra)
install.packages("gridExtra")
combined_plot <- grid.arrange(plot_rpart, plot_rf, nrow = 1)
combined_plot <- grid.arrange(plot_rpart, plot_rf, nrow = 1)
# Leer el conjunto de datos
SoNetAds <- read.csv("Social_Network_Ads.csv",
header = TRUE,
stringsAsFactors = T)
# Eliminar la columna User.ID
SoNetAds$User.ID <- NULL
# Convertir la variable Purchased a factor
SoNetAds$Purchased <- as.factor(SoNetAds$Purchased)
# Dividir los datos en conjuntos de entrenamiento y prueba
indice <- sample(2, nrow(SoNetAds), replace = TRUE, prob = c(0.7, 0.3))
train_data <- SoNetAds[indice == 1, ]
test_data <- SoNetAds[indice == 2, ]
# Modelo con rpart
SoNetAds.rpart <- rpart(formula = Purchased ~ Age + EstimatedSalary, data = train_data, minsplit = 5)
library(ggplot2)
library(caTools)
library(mltools)
library(data.table)
library(cowplot)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gridExtra)
# Leer el conjunto de datos
SoNetAds <- read.csv("Social_Network_Ads.csv",
header = TRUE,
stringsAsFactors = T)
# Eliminar la columna User.ID
SoNetAds$User.ID <- NULL
# Convertir la variable Purchased a factor
SoNetAds$Purchased <- as.factor(SoNetAds$Purchased)
# Dividir los datos en conjuntos de entrenamiento y prueba
indice <- sample(2, nrow(SoNetAds), replace = TRUE, prob = c(0.7, 0.3))
train_data <- SoNetAds[indice == 1, ]
test_data <- SoNetAds[indice == 2, ]
# Modelo con rpart
SoNetAds.rpart <- rpart(formula = Purchased ~ Age + EstimatedSalary, data = train_data, minsplit = 5)
# Realizar predicciones con el modelo rpart
predictions_rpart <- predict(SoNetAds.rpart, test_data, type = "class")
# Construir la matriz de confusión
confusion_matrix_rpart <- confusionMatrix(data = predictions_rpart, reference = test_data$Purchased)
print("Confusion Matrix for rpart:")
print(confusion_matrix_rpart)
# Gráfico de clasificación con el modelo rpart
# Creamos un conjunto de datos para la visualización
grid <- expand.grid(Age = seq(min(SoNetAds$Age), max(SoNetAds$Age), length.out = 100),
EstimatedSalary = seq(min(SoNetAds$EstimatedSalary), max(SoNetAds$EstimatedSalary), length.out = 100))
# Hacemos predicciones sobre el conjunto de datos
grid$Purchased <- predict(SoNetAds.rpart, newdata = grid, type = "class")
# Graficamos los datos con ggplot2
ggplot() +
geom_point(data = SoNetAds, aes(x = Age, y = EstimatedSalary, color = Purchased), alpha = 0.5) +
geom_point(data = grid, aes(x = Age, y = EstimatedSalary, color = Purchased), size = 1) +
scale_color_manual(values = c("red", "green")) +
labs(title = "Clasificación con modelo rpart",
x = "Age", y = "Estimated Salary")
# Modelo con Random Forest
SoNetAds_rf <- randomForest(formula = Purchased ~ Age + EstimatedSalary, data = train_data, ntree = 500)
# Realizar predicciones con el modelo Random Forest
predictions_rf <- predict(SoNetAds_rf, test_data)
# Construir la matriz de confusión
confusion_matrix_rf <- confusionMatrix(data = predictions_rf, reference = test_data$Purchased)
print("Confusion Matrix for Random Forest:")
print(confusion_matrix_rf)
# Gráfico de clasificación con el modelo Random Forest
# Generar datos para la visualización
grid_rf <- expand.grid(Age = seq(min(SoNetAds$Age), max(SoNetAds$Age), length.out = 100),
EstimatedSalary = seq(min(SoNetAds$EstimatedSalary), max(SoNetAds$EstimatedSalary), length.out = 100))
# Hacer predicciones sobre el conjunto de datos
grid_rf$Purchased <- predict(SoNetAds_rf, newdata = grid_rf)
# Crear gráfico con ggplot2 para Random Forest
plot_rf <- ggplot() +
geom_point(data = SoNetAds, aes(x = Age, y = EstimatedSalary, color = Purchased), alpha = 0.5) +
geom_point(data = grid_rf, aes(x = Age, y = EstimatedSalary, color = Purchased), size = 1) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Clasificación con Random Forest",
x = "Age", y = "Estimated Salary")
# Construir una sola gráfica que incluya ambas visualizaciones
#install.packages("gridExtra")
combined_plot <- grid.arrange(plot_rpart, plot_rf, nrow = 1)
# Leer el conjunto de datos
SoNetAds <- read.csv("Social_Network_Ads.csv",
header = TRUE,
stringsAsFactors = T)
# Eliminar la columna User.ID
SoNetAds$User.ID <- NULL
# Convertir la variable Purchased a factor
SoNetAds$Purchased <- as.factor(SoNetAds$Purchased)
# Dividir los datos en conjuntos de entrenamiento y prueba
indice <- sample(2, nrow(SoNetAds), replace = TRUE, prob = c(0.7, 0.3))
train_data <- SoNetAds[indice == 1, ]
test_data <- SoNetAds[indice == 2, ]
# Modelo con rpart
SoNetAds.rpart <- rpart(formula = Purchased ~ Age + EstimatedSalary, data = train_data, minsplit = 5)
# Realizar predicciones con el modelo rpart
predictions_rpart <- predict(SoNetAds.rpart, test_data, type = "class")
# Construir la matriz de confusión
confusion_matrix_rpart <- confusionMatrix(data = predictions_rpart, reference = test_data$Purchased)
print("Confusion Matrix for rpart:")
print(confusion_matrix_rpart)
# Gráfico de clasificación con el modelo rpart
# Creamos un conjunto de datos para la visualización
grid <- expand.grid(Age = seq(min(SoNetAds$Age), max(SoNetAds$Age), length.out = 100),
EstimatedSalary = seq(min(SoNetAds$EstimatedSalary), max(SoNetAds$EstimatedSalary), length.out = 100))
# Hacemos predicciones sobre el conjunto de datos
grid$Purchased <- predict(SoNetAds.rpart, newdata = grid, type = "class")
# Graficamos los datos con ggplot2
plot_rpart <- ggplot() +
geom_point(data = SoNetAds, aes(x = Age, y = EstimatedSalary, color = Purchased), alpha = 0.5) +
geom_point(data = grid, aes(x = Age, y = EstimatedSalary, color = Purchased), size = 1) +
scale_color_manual(values = c("red", "green")) +
labs(title = "Clasificación con modelo rpart",
x = "Age", y = "Estimated Salary")
# Modelo con Random Forest
SoNetAds_rf <- randomForest(formula = Purchased ~ Age + EstimatedSalary, data = train_data, ntree = 500)
# Realizar predicciones con el modelo Random Forest
predictions_rf <- predict(SoNetAds_rf, test_data)
# Construir la matriz de confusión
confusion_matrix_rf <- confusionMatrix(data = predictions_rf, reference = test_data$Purchased)
print("Confusion Matrix for Random Forest:")
print(confusion_matrix_rf)
# Gráfico de clasificación con el modelo Random Forest
# Generar datos para la visualización
grid_rf <- expand.grid(Age = seq(min(SoNetAds$Age), max(SoNetAds$Age), length.out = 100),
EstimatedSalary = seq(min(SoNetAds$EstimatedSalary), max(SoNetAds$EstimatedSalary), length.out = 100))
# Hacer predicciones sobre el conjunto de datos
grid_rf$Purchased <- predict(SoNetAds_rf, newdata = grid_rf)
# Crear gráfico con ggplot2 para Random Forest
plot_rf <- ggplot() +
geom_point(data = SoNetAds, aes(x = Age, y = EstimatedSalary, color = Purchased), alpha = 0.5) +
geom_point(data = grid_rf, aes(x = Age, y = EstimatedSalary, color = Purchased), size = 1) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Clasificación con Random Forest",
x = "Age", y = "Estimated Salary")
# Construir una sola gráfica que incluya ambas visualizaciones
#install.packages("gridExtra")
combined_plot <- grid.arrange(plot_rpart, plot_rf, nrow = 1)
# Imprimir la gráfica combinada
print(combined_plot)
#Creado por: Aguas Montaño Sergio José - 217815601
#Entorno de trabajo
getwd()
setwd("E:/Personal/UNI/8vo Semestre/SSPIAII/Trabajos GitHub/SSPIAII.24A.AguasMontanoSergio/Rstudio/p1.5_Arboles")
options(scipen = 999)
set.seed(2000)
#Preprocesamiento
PoSal <- read.csv("Position_Salaries.csv",
header = T,
stringsAsFactors = T)
summary(PoSal)
PoSal$Position <- NULL
#Modelo lineal
mdl.lineal.Position <- lm(formula = Salary ~ Level,
data = PoSal)
summary(mdl.lineal.Position)
#Gráfico
plt.PoSal <- ggplot() +
theme_light() +
geom_point(aes(x = PoSal$Level,
y = PoSal$Salary)) +
xlab("Nivel") +
ylab("Salario") +
geom_line(aes(x = PoSal$Level,
y = predict(PoSal.rpart,
newdata = PoSal)),
colour = "green")+
geom_line(aes(x = new.Data$Level,
y = predict(PoSal.rpart,
newdata = new.Data)),
colour = "blue")
#Llamar al gráfico
plt.PoSal
#Preprocesamiento
PoSal <- read.csv("Position_Salaries.csv",
header = T,
stringsAsFactors = T)
summary(PoSal)
PoSal$Position <- NULL
#Modelo lineal
mdl.lineal.Position <- lm(formula = Salary ~ Level,
data = PoSal)
summary(mdl.lineal.Position)
#Modelo con rpart
PoSal.rpart <- rpart(formula = Salary ~ Level, data = PoSal, minsplit = 5)
#Gráfico con ayuda del modelo rpart
rpart.plot(PoSal.rpart)
x <- seq(min(PoSal[,1]) - 1,
max(PoSal[,1]) + 1,
by = 0.1)
new.Data <- as.data.frame(x)
colnames(new.Data) <- "Level"
#Gráfico
plt.PoSal <- ggplot() +
theme_light() +
geom_point(aes(x = PoSal$Level,
y = PoSal$Salary)) +
xlab("Nivel") +
ylab("Salario") +
geom_line(aes(x = PoSal$Level,
y = predict(PoSal.rpart,
newdata = PoSal)),
colour = "green")+
geom_line(aes(x = new.Data$Level,
y = predict(PoSal.rpart,
newdata = new.Data)),
colour = "blue")
#Llamar al gráfico
plt.PoSal
ggsave(file = "parte1.jpg",
plot = plt.PoSal,
units = "in",
height = 7,
width = 14)
#PARTE 2
#Utiliza el dataset de "Social Network Ads" para construir dos modelos de clasificación uno de árboles de decisión (rpart) y el otro con bosques aleatorios (randomForest)
#Construye la matriz de confusión para evaluar la efectividad de cada modelo
#Representa los datos en una gráfica de clasificación para ambos casos
# Leer el conjunto de datos
SoNetAds <- read.csv("Social_Network_Ads.csv",
header = TRUE,
stringsAsFactors = T)
# Eliminar la columna User.ID
SoNetAds$User.ID <- NULL
# Convertir la variable Purchased a factor
SoNetAds$Purchased <- as.factor(SoNetAds$Purchased)
# Dividir los datos en conjuntos de entrenamiento y prueba
indice <- sample(2, nrow(SoNetAds), replace = TRUE, prob = c(0.7, 0.3))
train_data <- SoNetAds[indice == 1, ]
test_data <- SoNetAds[indice == 2, ]
# Modelo con rpart
SoNetAds.rpart <- rpart(formula = Purchased ~ Age + EstimatedSalary, data = train_data, minsplit = 5)
# Realizar predicciones con el modelo rpart
predictions_rpart <- predict(SoNetAds.rpart, test_data, type = "class")
# Construir la matriz de confusión
confusion_matrix_rpart <- confusionMatrix(data = predictions_rpart, reference = test_data$Purchased)
print("Confusion Matrix for rpart:")
print(confusion_matrix_rpart)
# Gráfico de clasificación con el modelo rpart
# Creamos un conjunto de datos para la visualización
grid <- expand.grid(Age = seq(min(SoNetAds$Age), max(SoNetAds$Age), length.out = 100),
EstimatedSalary = seq(min(SoNetAds$EstimatedSalary), max(SoNetAds$EstimatedSalary), length.out = 100))
# Hacemos predicciones sobre el conjunto de datos
grid$Purchased <- predict(SoNetAds.rpart, newdata = grid, type = "class")
# Graficamos los datos con ggplot2
plot_rpart <- ggplot() +
geom_point(data = SoNetAds, aes(x = Age, y = EstimatedSalary, color = Purchased), alpha = 0.5) +
geom_point(data = grid, aes(x = Age, y = EstimatedSalary, color = Purchased), size = 1) +
scale_color_manual(values = c("red", "green")) +
labs(title = "Clasificación con modelo rpart",
x = "Age", y = "Estimated Salary")
ggsave(file = "pt2_grp1.jpg",
plot = plot_rpart,
units = "in",
height = 7,
width = 14)
# Modelo con Random Forest
SoNetAds_rf <- randomForest(formula = Purchased ~ Age + EstimatedSalary, data = train_data, ntree = 500)
# Realizar predicciones con el modelo Random Forest
predictions_rf <- predict(SoNetAds_rf, test_data)
# Construir la matriz de confusión
confusion_matrix_rf <- confusionMatrix(data = predictions_rf, reference = test_data$Purchased)
print("Confusion Matrix for Random Forest:")
print(confusion_matrix_rf)
# Gráfico de clasificación con el modelo Random Forest
# Generar datos para la visualización
grid_rf <- expand.grid(Age = seq(min(SoNetAds$Age), max(SoNetAds$Age), length.out = 100),
EstimatedSalary = seq(min(SoNetAds$EstimatedSalary), max(SoNetAds$EstimatedSalary), length.out = 100))
# Hacer predicciones sobre el conjunto de datos
grid_rf$Purchased <- predict(SoNetAds_rf, newdata = grid_rf)
# Crear gráfico con ggplot2 para Random Forest
plot_rf <- ggplot() +
geom_point(data = SoNetAds, aes(x = Age, y = EstimatedSalary, color = Purchased), alpha = 0.5) +
geom_point(data = grid_rf, aes(x = Age, y = EstimatedSalary, color = Purchased), size = 1) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Clasificación con Random Forest",
x = "Age", y = "Estimated Salary")
ggsave(file = "pt2_grp2.jpg",
plot = plot_rf,
units = "in",
height = 7,
width = 14)
# Construir una sola gráfica que incluya ambas visualizaciones
#install.packages("gridExtra")
combined_plot <- grid.arrange(plot_rpart, plot_rf, nrow = 1)
ggsave(file = "pt2_comparacion.jpg",
plot = combined_plot,
units = "in",
height = 7,
width = 14)
# Imprimir la gráfica combinada
print(combined_plot)
